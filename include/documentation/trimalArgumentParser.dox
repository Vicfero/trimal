/**
\class trimAlManager 
\brief Main class of Trimal: It parses arguments and performs the algorithm requested on them.
*/

/**
\var bool trimAlManager::appearErrors
\brief Flag to trace errors.
*/

/**
\var bool trimAlManager::getComplementary
\brief Flag to return the complementary alignment.
*/

/**
\var bool trimAlManager::columnNumbering
\brief Flag to return column numbering in report.
*/

/**
\var bool trimAlManager::nogaps
\brief Flag to use the nogaps option
*/

/**
\var bool trimAlManager::noallgaps
\brief Flag to use the noallgaps option
*/

/**
\var bool trimAlManager::gappyout
\brief Flag to use the gappyout trimming method
*/

/**
\var bool trimAlManager::strict
\brief Flag to use the strict trimming method
*/

/**
\var bool trimAlManager::strictplus
\brief Flag to use the strictplus trimming method
*/

/**
\var bool trimAlManager::automated1
\brief Flag to use the automated1 trimming method
*/

/**
\var bool trimAlManager::sgc
\brief Flag to show the Gaps Scores per column
*/

/**
\var bool trimAlManager::sgt
\brief Flag to show the Accumulated Gaps Scores
*/

/**
\var bool trimAlManager::scc
\brief Flag to show the Similarity Scores per column
*/

/**
\var bool trimAlManager::sct
\brief Flag to show the Accumulated Similarity Scores
*/

/**
\var bool trimAlManager::sfc
\brief Flag to show the Sum of Pairs scores per column
*/

/**
\var bool trimAlManager::sft
\brief Flag to show the Accumulated Sum of Pairs 
*/

/**
\var bool trimAlManager::sident
\brief Flag to show identity scores in the alignment
*/

/**
\var bool trimAlManager::selectSeqs
\brief Flag to select sequences manually from the alignment
*/

/**
\var bool trimAlManager::selectCols
\brief Flag to select columns manually from the alignment
*/

/**
\var bool trimAlManager::shortNames
\brief Flag to shorten the names to a maximum of 10
*/

/**
\var bool trimAlManager::splitByStopCodon
\brief Flag to use the SplitByCodonStop option
*/

/**
\var bool trimAlManager::terminalOnly
\brief Flag to use the Terminal Only option
*/

/**
\var bool trimAlManager::keepSeqs
\brief Flag to keep sequences in the alignment
*/

/**
\var bool trimAlManager::ignoreStopCodon
\brief Flag to use the Ignore Stop Codon option
*/

/**
\var float trimAlManager::conservationThreshold
\brief Conservation Threshold to use while trimming
*/

/**
\var float trimAlManager::gapThreshold
\brief Gap Threshold to use while trimming
*/

/**
\var float trimAlManager::similarityThreshold
\brief Similarity Threshold to use while trimming
*/

/**
\var float trimAlManager::consistencyThreshold
\brief Consistency Threshold to use while trimming
*/

/**
\var float trimAlManager::residuesOverlap
\brief Residues Overlap to use while trimming
*/

/**
\var float trimAlManager::sequenceOverlap
\brief Sequence Overlap to use while trimming
*/

/**
\var float trimAlManager::maxIdentity
\brief Max Identity to use while trimming
*/

/**
\var int trimAlManager::stats
\brief Stats Flag to use in reporting. For each stat requested, this flag is decreased by one
*/

/**
\var int trimAlManager::prevType
\brief Flag to keep the sequence type while checking multiple files.
*/

/**
\var int trimAlManager::compareset
\brief Pointer to the argument that contains the compareset file.
*/

/**
\var int trimAlManager::windowSize
\brief Window Size to use while trimming
*/

/**
\var int trimAlManager::gapWindow
\brief Gap Window Size to use while trimming
*/

/**
\var int trimAlManager::similarityWindow
\brief Similarity Window to use while trimming
*/

/**
\var int trimAlManager::consistencyWindow
\brief Consistency Window to use while trimming
*/

/**
\var int trimAlManager::blockSize
\brief Block Size to use while trimming
*/

/**
\var int trimAlManager::clusters
\brief Number of most representative sequences we are going to use
*/

/**
\var int trimAlManager::argumentLength
\brief Temp variable to use when there is a need to copy an argument to a char array
*/

/**
\var int trimAlManager::i
\brief Argument Iterator Variable
*/

/**
\var int trimAlManager::num
\brief Temporal variable
*/

/**
\var int trimAlManager::maxAminos
\brief Temporal variable used when comparing alignments
*/

/**
\var int trimAlManager::numfiles
\brief Temporal variable used to store the number of files present in the compareset file
*/

/**
\var int trimAlManager::referFile
\brief Temporal variable used to track which file are we currently comparing
*/

/**
\var int trimAlManager::automatedMethodCount
\brief Integer counter of the automatic methods. \n 
If the counter is bigger than 0, we are using an automatic method.\n 
If the counter is bigger than 1, we are trying to use multiple automatic methods.
*/

/**
\var int trimAlManager::alternative_matrix
\brief Int that represents which alternative matrix to use, where '-1' means no alternative matrix, and '1' means degenerated_nt_identity
*/

/**
\var int trimAlManager::delColumns
\brief Vector that contains the column indexes the user specified to be removed
*/

/**
\var int trimAlManager::delSequences
\brief Vector that contains the sequence indexes the user specified to be removed
*/

/**
\var int trimAlManager::sequencesLengths
\brief Vector that contains the sequences lengths of each sequence in the backtranslation option. 
\note This can be moved to trimAlManager::check_backtranslation_infile_names_corresponde() function or even deleted, as we don't really need to copy them in order to compare them with origAlig names.
*/

/**
\var string trimAlManager::nline
\brief Temporal variable to use on the trimAlManager::check_multiple_files_comparison
\note This can be moved there.
*/

/**
\var string trimAlManager::sequencesNames
\brief Temporal variable to use in backtranslation option to compare with infile.
\note This variable may be deleted, as we don't need to copy the sequences names to compare them.
*/

/**
\var ifstream trimAlManager::compare
\brief Temporal variable to open files in trimAlManager::check_multiple_files_comparison function.
\note This could be moved there
*/

/**
\var float trimAlManager::compareVect
\brief Vector with the consistency value for each column in the selected alignment
*/

/**
\var sequencesMatrix trimAlManager::seqMatrix
\brief Temporal Sequences Matrix
*/

/**
\var similarityMatrix trimAlManager::similMatrix
\brief Temporal Similarity Matrix
*/

/**
\var newAlignment trimAlManager::origAlig
\brief Main alignment used/loaded on trimAl in combination with singleAlig.
*/

/**
\var newAlignment trimAlManager::singleAlig
\brief Alignment obtained by making modifications to singleAlig or backtranslationAlig.
*/

/**
\var newAlignment trimAlManager::tempAlig
\brief Temporal alignment that allows us to make some changes to trimAlManager::singleAlig, destroy it and set trimAlManager::singleAlig to this. 
*/

/**
\var newAlignment trimAlManager::compareAlignmentsArray
\brief Alignment Vector used on trimAlManager::check_multiple_files_comparison to compare them. 
\note This variable could be moved there.
*/

/**
\var newAlignment trimAlManager::backtranslationAlig
\brief Alignment used on the backtranslation functionality.
*/

/**
\var char trimAlManager::c
\brief Temporal char variable
*/

/**
\var char trimAlManager::forceFile
\brief Forcefile to use in combination with multiple files comparison, to compare them against this.
*/

/**
\var char trimAlManager::infile
\brief File to load the alignment when only one alignment has trimming interest.
*/

/**
\var char trimAlManager::backtransFile
\brief File to load the alignment containing the backtranslation information.
*/

/**
\var char trimAlManager::outfile
\brief File to output the trimmed alignment. This can contain tags which will be traduced to some variables:\n[in] will be changed with the original filename. \n[format] will be changed with the output format name specified.\n[extension] will be changed to the correct format extension.
*/

/**
\var char trimAlManager::htmlOutFile
\brief File to output the html report.
*/

/**
\var char trimAlManager::svgOutFile
\brief File to output the svg report.
*/

/**
\var char trimAlManager::svgStatsOutFile
\brief File to output the svg graph showing the stats along the alignment.
*/

/**
\var char trimAlManager::matrixFile
\brief File that contains a user defined similarity matrix.
*/

/**
\var char trimAlManager::filesToCompare
\brief Vector containing the files to compare in trimAlManager::check_multiple_files_comparison function.
\note This variable could be moved there.
*/

/**
\var char trimAlManager::line
\brief Temporal variable to read lines from a file.
*/

/**
\var std::vector<std::string> trimAlManager::oformats
\brief Formats names we are going to output our trimmed alignment.
*/

/**
\var ReadWriteMS trimAlManager::ReadWriteMachine
\brief Read Write Machine that allows to manage formats easily.
*/

/**
\fn void trimAlManager::parseArguments(int argc, char *argv[])
\brief Method to parse arguments into usable structure in trimal

\param argc Number of arguments in argv
\param argv Arguments passed to the program
*/

/**
\fn void trimAlManager::info_arguments(int* argc, char* argv[], int* i)
\brief Method to parse information arguments as help and menu

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i 
*/

/**
\fn bool trimAlManager::in_argument(int* argc, char* argv[], int* i)
\brief Method to parse the input file argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::verbosity_argument(int* argc, char* argv[], int* i)
\brief Method to parse the verbosity argument.\n
This check is performed before any other argument, so it affects other argument checks.

\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::out_argument(int* argc, char* argv[], int* i)
\brief Method to parse the output file pattern

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::html_out_argument(int* argc, char* argv[], int* i)
\brief Method to parse the html output file

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::svg_out_argument(int* argc, char* argv[], int* i)
\brief Method to parse the svg output file

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::svg_stats_argument(int* argc, char* argv[], int* i)
\brief Method to parse the svg stats output file

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::out_format_arguments(int* argc, char* argv[], int* i)
\brief Method to parse the output formats as -fasta -clustal or -formats [...]

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::matrix_argument(int* argc, char* argv[], int* i)
\brief Method to parse the custom matrix argument.

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::compareset_argument(int* argc, char* argv[], int* i)
\brief Method to parse the comparset argument.

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::force_select_argument(int* argc, char* argv[], int* i)
\brief Method to parse the force select argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::back_trans_argument(int* argc, char* argv[], int* i)
\brief Method to parse the backtranslation argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::gap_threshold_argument(int* argc, char* argv[], int* i)
\brief Method to parse the gap threshold argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::similarity_threshold_argument(int* argc, char* argv[], int* i)
\brief Method to parse the similarity threshold argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::consistency_threshold_argument(int* argc, char* argv[], int* i)
\brief Method to parse the consistency threshold argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::conservation_threshold_argument(int* argc, char* argv[], int* i)
\brief Method to parse the conservation threshold argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::select_cols_argument(int* argc, char* argv[], int* i)
\brief Method to parse the select columns argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::no_gaps_argument(int* argc, char* argv[], int* i)
\brief Method to parse the nogaps argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::no_all_gaps_argument(int* argc, char* argv[], int* i)
\brief Method to parse the noallgaps argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::keep_seqs_argument(int* argc, char* argv[], int* i)
\brief Method to parse the keepSeqs argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::keep_header_argument(int* argc, char* argv[], int* i)
\brief Method to parse the keepHeader argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::gappy_out_argument(int* argc, char* argv[], int* i)
\brief Method to parse the gappyout argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::strict_argument(int* argc, char* argv[], int* i)
\brief Method to parse the strict argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::strict_plus_argument(int* argc, char* argv[], int* i)
\brief Method to parse the strictplus argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::automated1_argument(int* argc, char* argv[], int* i)
\brief Method to parse the automated1 argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::residue_overlap_argument(int* argc, char* argv[], int* i)
\brief Method to parse the residue overlap argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::sequence_overlap_argument(int* argc, char* argv[], int* i)
\brief Method to parse the sequence overlap argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::seqs_select_argument(int* argc, char* argv[], int* i)
\brief Method to parse que select sequences argument.

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::max_identity_argument(int* argc, char* argv[], int* i)
\brief Method to parse the max identity argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::clusters_argument(int* argc, char* argv[], int* i)
\brief Method to parse the clusters argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::terminal_only_argument(int* argc, char* argv[], int* i)
\brief Method to parse the terminal only argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::window_argument(int* argc, char* argv[], int* i)
\brief Method to parse the Window argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::gap_window_argument(int* argc, char* argv[], int* i)
\brief Method to parse the Gap Window argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return 
*/

/**
\fn bool trimAlManager::similarity_window_argument(int* argc, char* argv[], int* i)
\brief Method to parse the Similarity Window argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::consistency_window_argument(int* argc, char* argv[], int* i)
\brief Method to parse the Consistency Window argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::block_argument(int* argc, char* argv[], int* i)
\brief Method to parse the Block Size argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::stats_arguments(int* argc, char* argv[], int* i)
\brief Method to parse stats arguments

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to any statistics argument. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::complementary_argument(int* argc, char* argv[], int* i)
\brief Method to parse the complementary argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::col_numbering_argument(int* argc, char* argv[], int* i)
\brief Method to parse the column numbering argument

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::split_by_stop_codon_argument(int* argc, char* argv[], int* i)
\brief Method to parse split by stop codon argument.

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::ignore_stop_codon_argument(int* argc, char* argv[], int* i)
\brief Method to parse ignore by stop codon argument.

\param argc Number of arguments in argv
\param argv Arguments passed to the program
\param i Current argument being evaluated
\return \b True if current argument (*i) corresponds to the argument being checked. \n\b False otherwise.
*/

/**
\fn bool trimAlManager::processArguments(char* argv[])
\brief Method to process the information obtained by trimAlManager::parseArguments\n
It checks for argument incompatibilities and arguments dependencies.

\param argv Arguments passed to the program
\return \b True if all checks have passed \n \b False otherwise
*/

/**
\fn bool trimAlManager::check_arguments_incompatibilities()
\brief Method to check argument incompatibilities.\n
Take in mind that an incompatibility is between two arguments, but only one method will check this incompatibility. If you are searching for the method that checks incompatibility between X and Y, this check may be done on check_X_incompatibilities or check_Y_incompatibilities.

\return \b True if all incompatibilities checks have passed.\n \b False otherwise
*/

/**
\fn bool trimAlManager::check_inFile_incompatibilities()
\brief Method to check the inFile argument incompatibilities

\return \b True if incompatibilities check has passed\n \b False otherwise
*/

/**
\fn bool trimAlManager::check_select_cols_and_seqs_incompatibilities()
\brief Method to check incompatibilities with select cols and select seqs arguments.

\return \b True if incompatibilities check has passed\n \b False otherwise
*/

/**
\fn bool trimAlManager::check_thresholds_incompatibilities()
\brief Method to check incompatibilities with manual thresholds 

\return \b True if incompatibilities check has passed\n \b False otherwise
*/

/**
\fn bool trimAlManager::check_automated_methods_incompatibilities()
\brief Method to check incompatibilities related to automated trimming methods

\return \b True if incompatibilities check has passed\n \b False otherwise
*/

/**
\fn bool trimAlManager::check_max_identity_incompatibilities()
\brief Method to check max identity incompatibilities

\return \b True if incompatibilities check has passed\n \b False otherwise
*/

/**
\fn bool trimAlManager::check_clusters_incompatibilities()
\brief Method to check clusters incompatibilities

\return \b True if incompatibilities check has passed\n \b False otherwise
*/

/**
\fn bool trimAlManager::check_windows_incompatibilities()
\brief Method to check windows incompatibilities

\return \b True if incompatibilities check has passed\n \b False otherwise
*/

/**
\fn bool trimAlManager::check_stats_incompatibilities()
\brief Method to check statistics incompatibilities

\return \b True if incompatibilities check has passed\n \b False otherwise
*/

/**
\fn bool trimAlManager::check_combinations_among_thresholds_incompatibility()
\brief As some thresholds are incompatible between them, we check their incompatibilities.

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_automated_manual_incompatibilities()
\brief Check if only one method, either automatic or manual has been asked.

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_codon_behaviour_incompatibility()
\brief Method to check incompatibilities related to how the algorithm should treat stop codons

\return \b True if incompatibilities check has passed\n \b False otherwise 
*/

/**
\fn bool trimAlManager::check_arguments_needs(char* argv[])
\brief Method that checks dependencies between arguments.\n
Take in mind that dependencies may be between multiple arguments, so, if there is a dependency between arguments X, Y and Z, this dependency check may be on check_X, check_Y or check_Z.\n At the same time, is possible to find a function that checks this dependency specifically: check_X_with_Y_and_Z

\param argv Arguments passed to the program
\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_force_selection()
\brief Method to check dependency of force select argument

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_input_file_with_coding_sequences_argument()
\brief Method to check dependency between custom coding sequence file and infile arguments

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_file_aligned()
\brief Method to check if an alignment needs to be aligned depending on the methods that have been asked to perform and, if so, checks if alignment is aligned.

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_similarity_matrix()
\brief Method to check if given a similarity matrix, there is a need to use it.

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_outputs_coincidence()
\brief Method to check if both output patterns (alignment output and html report output) are the same, which would mean one of them would overwrite the other.

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_col_numbering()
\brief Method to check if column numbering makes sense based on the functionality asked

\return \b False if dependencies check has passed\n \b True otherwise 
*/

/**
\fn bool trimAlManager::check_residue_and_sequence_overlap()
\brief Method to check if both of them (residue overlap and sequence overlap) have been defined by the user as they have a dependency on each other.

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_output_relevance()
\brief Method to check if, being asked to give an HTML report, it makes logic, depending on the functionality asked

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_output_relevance()
\brief Method to check if output is coherent. \n For example, it doesn't make sense to output an HTML if there is no trimming.

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_output_file_with_statistics()
\brief Method to check if there is an output file to allow statistics to be given on terminal.

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_multiple_files_comparison(char* argv[])
\brief Method to check if multiple files comparison has been set correctly.\n
It also perform some calculations needed on comparfiles behaviour.

\param argv Arguments passed to the program
\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_block_size()
\brief Method to check if the block size is bigger than allowed depending on size of alignment.

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_backtranslations()
\brief Method to check backtranslation needs 

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_coding_sequences_type()
\brief Method to check the type of sequences present in the backtranslationAlig

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_and_prepare_coding_sequence()
\brief Method to check and prepare the coding sequence.

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn bool trimAlManager::check_backtranslation_infile_names_corresponde()
\brief Method to check if the origAlig and backtranslationAlig are compatible in names to make the backtranslation behaviour

\return \b False if dependencies check has passed\n \b True otherwise
*/

/**
\fn void trimAlManager::check_cw_argument()
\brief Method to check and warn if windowsize and compareset has been given

*/

/**
\fn void trimAlManager::check_output_format()
\brief Method to check if an output format has been given. If no output format has been given, it will use the inFile format.

*/

/**
\fn int trimAlManager::perform()
\brief Method to perform the analysis if all checks have passed.

\return \b  0 if all went ok. \n \b -1 if parsing arguments went wrong on previously steps\n \b -2 if there was a problem with the similarity matrix.
*/

/**
\fn void trimAlManager::print_statistics()
\brief Method to print statistics requested.

*/

/**
\fn bool trimAlManager::create_or_use_similarity_matrix()
\brief Method to create, load and use a similarity matrix, depending on alignment residue nature, if the user gave a specific similarity matrix, etc.

\return 
*/

/**
\fn void trimAlManager::clean_alignment()
\brief Core Method of the program. This is where almost all cleaning methods are called from.

*/

/**
\fn void trimAlManager::set_window_size()
\brief Method to set correct window sizes depending on values for them given by the user.

*/

/**
\fn void trimAlManager::delete_variables()
\brief Method to delete all variables that need to be deallocated.

*/

/**
\fn void trimAlManager::menu()
\brief Method to show the menu of the program.

*/

/**
\fn void trimAlManager::examples()
\brief Method to show the examples information about the program.

*/
