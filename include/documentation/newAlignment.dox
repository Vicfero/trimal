/**
\class newAlignment
\brief Class containing an alignment\n
 This class stores the alignment sequences with it's names, residues and extra information.\n
 It contains multiple methods regarding the sequences.\n
 It also contains submodules that provide methods for<b> Calculating statistics</b>,
 <b> Cleaning the alignment</b> and<b> Printing sequences information</b>.
 */
 
/**
\var newAlignment::Cleaning
\brief Cleaning submodule.\n
It contains methods and variables related to trimming.
*/
    
/** 
\var newAlignment::Statistics
\brief Statistics submodule.\n
It contains methods and variables related to Statistics calculation and reporting.
*/
    
/**
\var newAlignment::SequencesMatrix
\brief SequencesMatrix submodule\n
\todo Give a good explanation of the module.
*/
    
/**
\var newAlignment::sgaps
\brief Gaps Statistics submodule.
*/

/** 
\var newAlignment::scons
\brief Conservation Statistics submodule.
*/
  

/**
\var newAlignment::sequenNumber
\brief Number of sequences present on the alignment.
*/

/**
\var newAlignment::residNumber
\brief Number of residues present on the alignment if it is aligned.
*/

/**
\var newAlignment::isAligned
\brief Flag that indicates if all sequences on the alignment have the same length.
*/

/**
\var newAlignment::dataType
\brief Number that represents the type of the alignment. 
*/

/**
\var newAlignment::sequences
\brief Sequences vector containing the sequences residues.
*/

/**
\var newAlignment::seqsName
\brief Sequences names vector containing the sequences names.
*/

/**
\var newAlignment::seqsInfo
\brief Sequences information vector containing extra information about each sequence.
*/

/**
\var newAlignment::filename
\brief Original filename where this alignment was loaded from.
*/

/**
\var newAlignment::aligInfo
\brief String containing information of the alignment as a whole.
*/

/**
\var newAlignment::identities
*/
    
/**
\var newAlignment::saveResidues
\brief Vector containing which residues will be kept/removed.\n
-1 Indicates a 'removed/toRemove'. Otherwise it will be kept
*/
    
/**
\var newAlignment::saveSequences
\brief Vector containing which sequences will be kept/removed.\n
-1 Indicates a 'removed/toRemove'. Otherwise it will be kept
*/

/**
\var newAlignment::SeqRef
\brief Pointer to keep a count of how many alignments depend on the same shared-sequences
*/

/**
\var newAlignment::originalSequenNumber
\brief Counter to how many sequences had the alignment when it was loaded.
*/

/**
\var newAlignment::originalResidNumber
\brief Counter to how many residues had the alignment when it was loaded.
*/

/**
\var newAlignment::identities
\brief Matrix that stores the identities between sequences of an alignment.
*/

/**
\var newAlignment::overlaps
\brief Matrix that stores the overlap between sequences of an alignment.
*/

/**
\fn newAlignment::fillMatrices(bool aligned)
\brief Method to intialize data that has been modified on the alignment.\n
The method checks if the sequences have been correctly loaded and are free of errors.\n
It checks if sequences contain unknown characters, sets the isAligned flag and initializes 'saveResidues' and 'saveSequences', depending on the sizes of the sequences (wether or not they have the same length).
\param aligned Flag to make the method check if the alignment is aligned or not.
\note Even with the aligned flag set to false, if the alignment is aligned it will initialize the variables 'saveResidues' and 'saveSequences', allowing the alignment to be trimmed.
\return 
    \b True if the alignment information was ok. \n
    \b False if there was a problem.\n
This could happen if the sequences contain any unknown character or if aligned flag is set up to corrent, if the sequences have variable sizes.
*/


/** 
\fn newAlignment::newAlignment(void)
\brief Constructor
*/

/**
\fn newAlignment::newAlignment(newAlignment&)
\brief Copy Constructor 
*/

/** 
\fn newAlignment::~newAlignment(void)
\brief Destructor 
*/

/**
\fn newAlignment::getNumSpecies(void)
\brief Getter for the number of species.
\return Number of sequences in the alignment.
*/

/**
\fn newAlignment::getSequences(string * names)
\brief Getter for the sequences names.
\param[out] names Vector of sequences names to fill.
*/

/**
\fn newAlignment::getSequences(string * names, int * lengths)
\brief Getter for the sequences names and its lenghts.
\param[out] names Vector of sequences names to fill.
\param[out] lengths Vector of lenghts to fill.
*/

/**
\fn newAlignment::getSequences(string * names, string * sequences, int * lenghts)
\brief Getter for the sequences, its names and lenghts.
\param[out] names Vector of sequences names to fill.
\param[out] sequences Vector of sequences to fill.
\param[out] lenghts Vector of lenghts to fill.
*/

/**
\fn newAlignment::getSequenceNameOrder(string * names, int * orderVector)
\brief Method to map two sets of sequences, own and external.\n
The method accepts a vector of names, and test them against the alignment owned sequences.\n
If the sequence is present, its order on the alignment sequences vector will be stored in orderVector, in the same position it's name was in the names vector.\n
\param names Vector of sequences names to map.
\param[out] orderVector Vector of orders to fill.
\return \b True if both sets have the same sequences.\n \b False otherwise.
*/

/**
\fn newAlignment::getNumAminos(void)
\brief Residues getter.
\return Number of residues in the alignment.
*/

/**
\fn newAlignment::setWindowsSize(int ghWindow, int shWindow)
\brief Windows setter
\param ghWindow Half the Gap Window.
\param shWindow Half the similarity Window.
*/

/**
\fn newAlignment::setBlockSize(int blockSize)
\brief blockSize Setter.
\param blockSize New value.
*/


/**
\fn newAlignment::getBlockSize(void)
\brief blockSize getter.
\return blockSize.
*/

/**
\fn newAlignment::calculateSeqIdentity(void)
\brief Calculates identity between sequences.
*/

/**
\fn newAlignment::calculateRelaxedSeqIdentity(void)
\brief Lightweight version of newAlignment::calculateSeqIdentity for use in huge alignments.
*/

/**
\fn newAlignment::calculateSeqOverlap(void)
\brief Calculates overlap between sequences.
*/

/**
\fn newAlignment::printSeqOverlap(void)
\brief Prints the overlap between sequences.
*/

/**
\fn newAlignment::printSeqIdentity(void)
\brief Method to print different identity values computed from the alignment.\n
In this method we assess the identity values matrix, as well as diferent average values. \n
Moreover, the method computes which one is the most similar sequence, in term of identity values, for each one on this alignment
*/

/**
\fn newAlignment::getAlignmentType(void)
\brief Alignment type getter.
\return Int representing the alignment type.\n
- DNAType 1
- RNAType 2
- AAType  3
*/

/**
\fn newAlignment::getCorrespResidues(void)
\brief Method that returns the correspondence between old and new alignment residues.
\return Vector that represents which residues are kept (!= -1) and which are rejected (== -1) 
*/

/**
\fn newAlignment::getCorrespSequences(void)
\brief Method that returns the correspondence between old and new alignment sequences.
\return Vector that represents which sequences are kept (!= -1) and which are rejected (== -1) 
*/

/** 
\fn newAlignment::isFileAligned(void)
\brief isAligned getter.
\return Wheter the alignment is aligned or not.
*/

/**
\fn newAlignment::getTranslationCDS(newAlignment * proteinAlignment)
\brief Method to obtain a DNA alignment from a Protein alignment.
\param proteinAlignment Protein Alignment to use as origin.
\return Pointer to new alignment.
*/

/**
\fn newAlignment::checkCorrespondence(string * names, int * lenghts, int totalInputSequences, int multiple)
\brief Function to check CDS file.\n
It checks if sequences of input alignment are all present on the CDS file.\n
If nucleotide sequence is larger than protein sequence length * 3, warns about it and cuts the nucleotide sequence\n
If sequence has indetermination symbols, it warns about it.\n
If nucleotide sequence is smaller than protein sequence * 3, it adds some 'N' at the end of the nucleotide sequence.
\param names Vector containing the names to check.
\param lenghts Vector containing the length of each sequence.
\param totalInputSequences Number of sequences present.
\param multiple Multiplies the length of each sequence by this number.
\return \b True if all went right.\n \b False if there is a sequence in the alignment but not in the names vector.
*/

/**
\fn newAlignment::fillNewDataStructure(string * newMatrix, string * newNames)
\brief Method that copies information of the alignment to the pointers given.
\param[out] newMatrix Sequences vector to fill.
\param[out] newNames Names vector to fill.
*/

/**
\fn newAlignment::calculateColIdentity(float * columnIdentity)
\brief Method that calculates the columns identity value.\n
This is, the frequency of the most present element in the column, being residue, indetermination and gap allowed.
\param[out] columnIdentity Vector to fill with identities for each column.
*/

/**
\fn newAlignment::printColumnsIdentity_DescriptiveStats(void)
\brief Method to print Indentity stats: Min, Max, Avg and Std.
*/

/**
\fn newAlignment::setKeepSequencesFlag(bool newFlagValue)
\brief Keep Sequences setter.
\param newFlagValue New value
*/

/**
\fn newAlignment::setKeepSeqsHeaderFlag(bool newFlagValue)
\brief Keep Header setter.
\param newFlagValue New value
*/

/**
\fn newAlignment::printAlignmentInfo(ostream & output)
\brief Print information about sequences number, average sequence length, maximum and minimum sequences length, etc 
\param output Output stream.
*/

/**
\fn newAlignment::prepareCodingSequence(bool splitByStopCodon, bool ignoreStopCodon, newAlignment * proteinAlignment)
\brief Method to check if the CDS file is correct.\n
Based on nature of residues: DNA/RNA (Most of the residues)\n
There is no gaps on the whole dataset.\n
Each sequence is a multiple of 3.\n
\n
It will also remove or split stop codons depending on the flags passed.
\param splitByStopCodon Flag that informs the method to split sequences if it finds any stop codon.
\param ignoreStopCodon Flag that informs the method to stop reading sequence if it finds any stop codon.
\param proteinAlignment Alignment containing protein sequences which names contains all names in the current alignment.
*/

/**
\fn newAlignment::alignmentSummaryHTML(newAlignment & _trimmedAlignment, char *destFile, float *consValues)
\brief Method to report the trimming results in HTML.\n
It contains information about the original and trimmed alignments, showing which residues and sequences have been kept and which ones have been removed on the output.
\param _trimmedAlignment Trimmed alignment obtained from the object calling this function.
\param destFile Filename where to save the results.
\param consValues Vector containing the consistency values of columns.\n The consistency may be a null pointer, meaning we don't want to report consistency values.
\return \b True if everything went ok. \n \b False if file couldn't be open or alignment is not aligned.
*/

/**
\fn newAlignment::alignmentSummarySVG(newAlignment & _trimmedAlignment, char *destFile, float *consValues, int blocks)
\brief Method to report the trimming results in HTML.\n
It contains information about the original and trimmed alignments, showing which residues and sequences have been kept and which ones have been removed on the output.
\param _trimmedAlignment Trimmed alignment obtained from the object calling this function.
\param destFile Filename where to save the results.
\param consValues Vector containing the consistency values of columns.\n The consistency may be a null pointer, meaning we don't want to report consistency values.
\param blocks Size in residues to report. 120 by default.
\return \b True if everything went ok. \n \b False if file couldn't be open or alignment is not aligned.
*/

/**
\fn newAlignment::alignmentColourHTML(ostream &file)
\brief Method that saves a clustal-color based visualization of the alignment.\n
It doesn't report any trimming result, meaning this only shows information of an alignment.
\param file Where to save the visualization.
\return \b True if everything went ok. \n \b False if alignment is not aligned.
*/

/**
\fn newAlignment::updateSequencesAndResiduesNums(bool countSequences, bool countResidues)
\brief Updates the sequence number and residue number based on saveResidues and saveSequences
\param countSequences Wether to count sequences
\param countResidues Wether to count residues
*/
